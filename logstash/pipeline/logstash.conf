input {
	beats {
		port => 5044
	}

	tcp {
		port => 50000
	}
}

## Add your filters / logstash plugins configuration here
filter {
	if [event][dataset] == "apache.access" {
		# 1. Breakup the message sent from Filebeat into distinct fields
		grok {
			match => { "message" => "%{HTTPD_COMBINEDLOG} vhost=%{HOSTNAME:[cgdp][vhost]} host=%{HOSTNAME:[destination][domain]} hosting_site=%{WORD:[service][environment]} pid=%{POSINT:[cgdp][pid]} request_time=%{POSINT:[cgdp][request_time]} forwarded_for=%{QUOTEDSTRING:[cgdp][forwarded_for]} request_id=\"v-%{UUID:[trace][id]}\" location=%{QUOTEDSTRING:[cgdp][location]}" }
		}
		# 2. Setup the correct timestamp, which by default is the time the log was processed.
		# 2a. Copy the time the event was ingested into the correct ECS field
		mutate {
			copy => { "@timestamp" => "[event][ingested]" }
		}
		# 2b. Parse the apache timestamp and put in @timestamp
		date {
			match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
		}
		# 2c. Remove the old timestamp
		mutate {
			remove_field => "timestamp"
		}
		# 3. Breakup the user agent string into separate subfields
		useragent {
			source => "[user_agent][original]"
		}
		# 4. Breakup the requested URL into parts
		grok {
			match => { "[url][original]" => "%{URIPATH:[url][path]}(?:%{URIQUERY:[url][query]})" }
		}
		if ([url][path] =~ "\.\w+$") {
			grok {
				match => { "[url][path]" => "\.(?<[url][extension]>\w+)$"}
			}
		}
		# 5. Turn the query params into key/value params, only if we have a query
		if ("" in [url][query] and [url][query] =~ "^\?[^?]+") {
			# 5a. Copy query params to a custom field
			mutate {
				copy => { "[url][query]" => "[cgdp][query]" }
				# Double backslashes in the query will break Ruby/event.set
				gsub => [
					"[cgdp][query]", "[\\]", ""
				]
			}
			# 5b. Break up the custom field into the collection of query params
			grok {
				match => { "[cgdp][query]" => "^\?(?<[cgdp][query]>[A-Za-z0-9$.+!*'|(){},~@%&/=:;_?\-\[\]<>]*)(?:#(?:%{WORD:[url][fragment]}))?" }
				overwrite => [ "[cgdp][query]" ]
			}
			mutate {
				copy => { "[cgdp][query]" => "[cgdp][queryparams]" }
			}
			mutate {
				split => { "[cgdp][queryparams]" => "&" }
			}
			mutate {
				gsub => [ "[cgdp][queryparams]", "[=].*", "" ]
			}
		}
		# 6. Turn HTTP status codes into ranges
		# if ([http][response][status_code] >= 100 and [http][response][status_code] < 200) {
		# 	mutate {
		# 		add_field => { "[cgdp][http_status_type]" => "1xx" }
		# 	}
		# } else if ([http][response][status_code] >= 200 and [http][response][status_code] < 300) {
		# 	mutate {
		# 		add_field => { "[cgdp][http_status_type]" => "2xx" }
		# 	}
		# } else if ([http][response][status_code] >= 300 and [http][response][status_code] < 400) {
		# 	mutate {
		# 		add_field => { "[cgdp][http_status_type]" => "3xx" }
		# 	}
		# } else if ([http][response][status_code] >= 400 and [http][response][status_code] < 500) {
		# 	mutate {
		# 		add_field => { "[cgdp][http_status_type]" => "4xx" }
		# 	}
		# } else if ([http][response][status_code] >= 500 and [http][response][status_code] < 600) {
		# 	mutate {
		# 		add_field => { "[cgdp][http_status_type]" => "5xx" }
		# 	}
		# } 
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
	}
	# stdout {
	# 	codec => "rubydebug"
	# }
}
